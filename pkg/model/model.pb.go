// Code generated by protoc-gen-gogo.
// source: model.proto
// DO NOT EDIT!

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		model.proto

	It has these top-level messages:
		Span
		LogRecord
		KeyValue
		SpanContext
		Baggage
*/
package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KeyValue_Type int32

const (
	Bool    KeyValue_Type = 0
	Error   KeyValue_Type = 1
	Float64 KeyValue_Type = 3
	Int64   KeyValue_Type = 5
	String  KeyValue_Type = 6
	Uint64  KeyValue_Type = 9
)

var KeyValue_Type_name = map[int32]string{
	0: "Bool",
	1: "Error",
	3: "Float64",
	5: "Int64",
	6: "String",
	9: "Uint64",
}
var KeyValue_Type_value = map[string]int32{
	"Bool":    0,
	"Error":   1,
	"Float64": 3,
	"Int64":   5,
	"String":  6,
	"Uint64":  9,
}

func (KeyValue_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorModel, []int{2, 0} }

type Span struct {
	SpanContext   `protobuf:"bytes,1,opt,name=span_context,json=spanContext,embedded=span_context" json:"span_context"`
	ParentSpanId  uint64      `protobuf:"varint,2,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	Start         time.Time   `protobuf:"bytes,3,opt,name=start,stdtime" json:"start"`
	End           time.Time   `protobuf:"bytes,4,opt,name=end,stdtime" json:"end"`
	OperationName string      `protobuf:"bytes,5,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	Tags          []KeyValue  `protobuf:"bytes,6,rep,name=tags" json:"tags"`
	Logs          []LogRecord `protobuf:"bytes,7,rep,name=logs" json:"logs"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func (m *Span) GetParentSpanId() uint64 {
	if m != nil {
		return m.ParentSpanId
	}
	return 0
}

func (m *Span) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *Span) GetEnd() time.Time {
	if m != nil {
		return m.End
	}
	return time.Time{}
}

func (m *Span) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

func (m *Span) GetTags() []KeyValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Span) GetLogs() []LogRecord {
	if m != nil {
		return m.Logs
	}
	return nil
}

type LogRecord struct {
	Timestamp time.Time  `protobuf:"bytes,1,opt,name=timestamp,stdtime" json:"timestamp"`
	Fields    []KeyValue `protobuf:"bytes,2,rep,name=fields" json:"fields"`
}

func (m *LogRecord) Reset()                    { *m = LogRecord{} }
func (*LogRecord) ProtoMessage()               {}
func (*LogRecord) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

func (m *LogRecord) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *LogRecord) GetFields() []KeyValue {
	if m != nil {
		return m.Fields
	}
	return nil
}

type KeyValue struct {
	Key     string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type    KeyValue_Type `protobuf:"varint,2,opt,name=type,proto3,enum=model.KeyValue_Type" json:"type,omitempty"`
	Bool    bool          `protobuf:"varint,3,opt,name=bool,proto3" json:"bool,omitempty"`
	Error   string        `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Float64 float64       `protobuf:"fixed64,6,opt,name=float64,proto3" json:"float64,omitempty"`
	Int64   int64         `protobuf:"varint,8,opt,name=int64,proto3" json:"int64,omitempty"`
	String_ string        `protobuf:"bytes,9,opt,name=string,proto3" json:"string,omitempty"`
	Uint64  uint64        `protobuf:"varint,11,opt,name=uint64,proto3" json:"uint64,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{2} }

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetType() KeyValue_Type {
	if m != nil {
		return m.Type
	}
	return Bool
}

func (m *KeyValue) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *KeyValue) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *KeyValue) GetFloat64() float64 {
	if m != nil {
		return m.Float64
	}
	return 0
}

func (m *KeyValue) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *KeyValue) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *KeyValue) GetUint64() uint64 {
	if m != nil {
		return m.Uint64
	}
	return 0
}

type SpanContext struct {
	TraceId uint64    `protobuf:"varint,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId  uint64    `protobuf:"varint,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Baggage []Baggage `protobuf:"bytes,3,rep,name=baggage" json:"baggage"`
}

func (m *SpanContext) Reset()                    { *m = SpanContext{} }
func (*SpanContext) ProtoMessage()               {}
func (*SpanContext) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{3} }

func (m *SpanContext) GetTraceId() uint64 {
	if m != nil {
		return m.TraceId
	}
	return 0
}

func (m *SpanContext) GetSpanId() uint64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *SpanContext) GetBaggage() []Baggage {
	if m != nil {
		return m.Baggage
	}
	return nil
}

type Baggage struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Baggage) Reset()                    { *m = Baggage{} }
func (*Baggage) ProtoMessage()               {}
func (*Baggage) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{4} }

func (m *Baggage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Baggage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Span)(nil), "model.Span")
	proto.RegisterType((*LogRecord)(nil), "model.LogRecord")
	proto.RegisterType((*KeyValue)(nil), "model.KeyValue")
	proto.RegisterType((*SpanContext)(nil), "model.SpanContext")
	proto.RegisterType((*Baggage)(nil), "model.Baggage")
	proto.RegisterEnum("model.KeyValue_Type", KeyValue_Type_name, KeyValue_Type_value)
}
func (x KeyValue_Type) String() string {
	s, ok := KeyValue_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Span) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Span)
	if !ok {
		that2, ok := that.(Span)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SpanContext.Equal(&that1.SpanContext) {
		return false
	}
	if this.ParentSpanId != that1.ParentSpanId {
		return false
	}
	if !this.Start.Equal(that1.Start) {
		return false
	}
	if !this.End.Equal(that1.End) {
		return false
	}
	if this.OperationName != that1.OperationName {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(&that1.Tags[i]) {
			return false
		}
	}
	if len(this.Logs) != len(that1.Logs) {
		return false
	}
	for i := range this.Logs {
		if !this.Logs[i].Equal(&that1.Logs[i]) {
			return false
		}
	}
	return true
}
func (this *LogRecord) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogRecord)
	if !ok {
		that2, ok := that.(LogRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(&that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *KeyValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*KeyValue)
	if !ok {
		that2, ok := that.(KeyValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Bool != that1.Bool {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Float64 != that1.Float64 {
		return false
	}
	if this.Int64 != that1.Int64 {
		return false
	}
	if this.String_ != that1.String_ {
		return false
	}
	if this.Uint64 != that1.Uint64 {
		return false
	}
	return true
}
func (this *SpanContext) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SpanContext)
	if !ok {
		that2, ok := that.(SpanContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TraceId != that1.TraceId {
		return false
	}
	if this.SpanId != that1.SpanId {
		return false
	}
	if len(this.Baggage) != len(that1.Baggage) {
		return false
	}
	for i := range this.Baggage {
		if !this.Baggage[i].Equal(&that1.Baggage[i]) {
			return false
		}
	}
	return true
}
func (this *Baggage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Baggage)
	if !ok {
		that2, ok := that.(Baggage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Span) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&model.Span{")
	s = append(s, "SpanContext: "+strings.Replace(this.SpanContext.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ParentSpanId: "+fmt.Sprintf("%#v", this.ParentSpanId)+",\n")
	s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	s = append(s, "End: "+fmt.Sprintf("%#v", this.End)+",\n")
	s = append(s, "OperationName: "+fmt.Sprintf("%#v", this.OperationName)+",\n")
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	if this.Logs != nil {
		s = append(s, "Logs: "+fmt.Sprintf("%#v", this.Logs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&model.LogRecord{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KeyValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&model.KeyValue{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Bool: "+fmt.Sprintf("%#v", this.Bool)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "Float64: "+fmt.Sprintf("%#v", this.Float64)+",\n")
	s = append(s, "Int64: "+fmt.Sprintf("%#v", this.Int64)+",\n")
	s = append(s, "String_: "+fmt.Sprintf("%#v", this.String_)+",\n")
	s = append(s, "Uint64: "+fmt.Sprintf("%#v", this.Uint64)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpanContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&model.SpanContext{")
	s = append(s, "TraceId: "+fmt.Sprintf("%#v", this.TraceId)+",\n")
	s = append(s, "SpanId: "+fmt.Sprintf("%#v", this.SpanId)+",\n")
	if this.Baggage != nil {
		s = append(s, "Baggage: "+fmt.Sprintf("%#v", this.Baggage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Baggage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&model.Baggage{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringModel(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.SpanContext.Size()))
	n1, err := m.SpanContext.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.ParentSpanId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.ParentSpanId))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintModel(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x22
	i++
	i = encodeVarintModel(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.End)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.End, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.OperationName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.OperationName)))
		i += copy(dAtA[i:], m.OperationName)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x32
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LogRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintModel(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x12
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
	}
	if m.Bool {
		dAtA[i] = 0x18
		i++
		if m.Bool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Float64 != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64Model(dAtA, i, uint64(math.Float64bits(float64(m.Float64))))
	}
	if m.Int64 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Int64))
	}
	if len(m.String_) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.String_)))
		i += copy(dAtA[i:], m.String_)
	}
	if m.Uint64 != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Uint64))
	}
	return i, nil
}

func (m *SpanContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TraceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.TraceId))
	}
	if m.SpanId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.SpanId))
	}
	if len(m.Baggage) > 0 {
		for _, msg := range m.Baggage {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Baggage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Baggage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func encodeFixed64Model(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Model(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Span) Size() (n int) {
	var l int
	_ = l
	l = m.SpanContext.Size()
	n += 1 + l + sovModel(uint64(l))
	if m.ParentSpanId != 0 {
		n += 1 + sovModel(uint64(m.ParentSpanId))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovModel(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.End)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.OperationName)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *LogRecord) Size() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovModel(uint64(l))
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if m.Bool {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Float64 != 0 {
		n += 9
	}
	if m.Int64 != 0 {
		n += 1 + sovModel(uint64(m.Int64))
	}
	l = len(m.String_)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Uint64 != 0 {
		n += 1 + sovModel(uint64(m.Uint64))
	}
	return n
}

func (m *SpanContext) Size() (n int) {
	var l int
	_ = l
	if m.TraceId != 0 {
		n += 1 + sovModel(uint64(m.TraceId))
	}
	if m.SpanId != 0 {
		n += 1 + sovModel(uint64(m.SpanId))
	}
	if len(m.Baggage) > 0 {
		for _, e := range m.Baggage {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *Baggage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Span) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Span{`,
		`SpanContext:` + strings.Replace(strings.Replace(this.SpanContext.String(), "SpanContext", "SpanContext", 1), `&`, ``, 1) + `,`,
		`ParentSpanId:` + fmt.Sprintf("%v", this.ParentSpanId) + `,`,
		`Start:` + strings.Replace(strings.Replace(this.Start.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`End:` + strings.Replace(strings.Replace(this.End.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`OperationName:` + fmt.Sprintf("%v", this.OperationName) + `,`,
		`Tags:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Tags), "KeyValue", "KeyValue", 1), `&`, ``, 1) + `,`,
		`Logs:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Logs), "LogRecord", "LogRecord", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogRecord{`,
		`Timestamp:` + strings.Replace(strings.Replace(this.Timestamp.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`Fields:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Fields), "KeyValue", "KeyValue", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyValue{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Bool:` + fmt.Sprintf("%v", this.Bool) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Float64:` + fmt.Sprintf("%v", this.Float64) + `,`,
		`Int64:` + fmt.Sprintf("%v", this.Int64) + `,`,
		`String_:` + fmt.Sprintf("%v", this.String_) + `,`,
		`Uint64:` + fmt.Sprintf("%v", this.Uint64) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpanContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpanContext{`,
		`TraceId:` + fmt.Sprintf("%v", this.TraceId) + `,`,
		`SpanId:` + fmt.Sprintf("%v", this.SpanId) + `,`,
		`Baggage:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Baggage), "Baggage", "Baggage", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Baggage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Baggage{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModel(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpanContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanId", wireType)
			}
			m.ParentSpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentSpanId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.End, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, KeyValue{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, LogRecord{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, KeyValue{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (KeyValue_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bool = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Float64 = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64", wireType)
			}
			m.Uint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			m.TraceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			m.SpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baggage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Baggage = append(m.Baggage, Baggage{})
			if err := m.Baggage[len(m.Baggage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Baggage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Baggage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Baggage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xce, 0xc6, 0xff, 0xe2, 0x71, 0x7f, 0xf9, 0x59, 0xab, 0x0a, 0x4c, 0x0f, 0x4e, 0x14, 0x81,
	0x64, 0x10, 0x75, 0x45, 0x41, 0x3d, 0x70, 0x41, 0x0a, 0x02, 0xa9, 0x2a, 0xe2, 0xb0, 0x2d, 0x5c,
	0xab, 0x4d, 0xbc, 0x35, 0x16, 0x8e, 0xd7, 0xd8, 0x1b, 0x44, 0x2e, 0x88, 0x47, 0xe8, 0x0b, 0x70,
	0xe7, 0x51, 0x7a, 0xec, 0x91, 0x53, 0x4b, 0xcd, 0x85, 0x63, 0x1f, 0x01, 0xed, 0xae, 0xd3, 0x00,
	0x42, 0x08, 0x6e, 0xf3, 0xcd, 0x7c, 0xf3, 0xcd, 0xec, 0x7e, 0x03, 0xde, 0x8c, 0x27, 0x2c, 0x8f,
	0xcb, 0x8a, 0x0b, 0x8e, 0x2d, 0x05, 0x36, 0x36, 0xd3, 0x4c, 0xbc, 0x9a, 0x4f, 0xe2, 0x29, 0x9f,
	0x6d, 0xa5, 0x3c, 0xe5, 0x5b, 0xaa, 0x3a, 0x99, 0x1f, 0x29, 0xa4, 0x80, 0x8a, 0x74, 0xd7, 0xc6,
	0x20, 0xe5, 0x3c, 0xcd, 0xd9, 0x8a, 0x25, 0xb2, 0x19, 0xab, 0x05, 0x9d, 0x95, 0x9a, 0x30, 0x3a,
	0xef, 0x82, 0xb9, 0x5f, 0xd2, 0x02, 0x3f, 0x82, 0xb5, 0xba, 0xa4, 0xc5, 0xe1, 0x94, 0x17, 0x82,
	0xbd, 0x13, 0x01, 0x1a, 0xa2, 0xc8, 0xdb, 0xc6, 0xb1, 0xde, 0x41, 0x52, 0x1e, 0xeb, 0xca, 0xb8,
	0x77, 0x72, 0x36, 0xe8, 0x9c, 0x9e, 0x0d, 0x10, 0xf1, 0xea, 0x55, 0x1a, 0xdf, 0x84, 0x7e, 0x49,
	0x2b, 0x56, 0x88, 0x43, 0xa5, 0x93, 0x25, 0x41, 0x77, 0x88, 0x22, 0x93, 0xac, 0xe9, 0xac, 0x54,
	0xd8, 0x4d, 0xf0, 0x43, 0xb0, 0x6a, 0x41, 0x2b, 0x11, 0x18, 0x4a, 0x7f, 0x23, 0xd6, 0x0b, 0xc6,
	0xcb, 0x05, 0xe3, 0x83, 0xe5, 0x82, 0x7a, 0xce, 0xf1, 0xf9, 0x00, 0x11, 0xdd, 0x82, 0x77, 0xc0,
	0x60, 0x45, 0x12, 0x98, 0xff, 0xd0, 0x29, 0x1b, 0xf0, 0x2d, 0xe8, 0xf3, 0x92, 0x55, 0x54, 0x64,
	0xbc, 0x38, 0x2c, 0xe8, 0x8c, 0x05, 0xd6, 0x10, 0x45, 0x2e, 0xf9, 0xef, 0x2a, 0xfb, 0x9c, 0xce,
	0x18, 0xbe, 0x0d, 0xa6, 0xa0, 0x69, 0x1d, 0xd8, 0x43, 0x23, 0xf2, 0xb6, 0xff, 0x6f, 0x5f, 0xbe,
	0xc7, 0x16, 0x2f, 0x69, 0x3e, 0x67, 0x63, 0x53, 0x8a, 0x12, 0x45, 0xc1, 0x77, 0xc0, 0xcc, 0x79,
	0x5a, 0x07, 0x8e, 0xa2, 0xfa, 0x2d, 0xf5, 0x19, 0x4f, 0x09, 0x9b, 0xf2, 0x2a, 0x59, 0x72, 0x25,
	0x67, 0xf4, 0x1e, 0xdc, 0xab, 0x02, 0x1e, 0x83, 0x7b, 0xe5, 0x40, 0xfb, 0xc5, 0x7f, 0xf7, 0x90,
	0x55, 0x1b, 0xde, 0x04, 0xfb, 0x28, 0x63, 0x79, 0x52, 0x07, 0xdd, 0x3f, 0x6d, 0xda, 0x92, 0x46,
	0x1f, 0xbb, 0xd0, 0x5b, 0x96, 0xb0, 0x0f, 0xc6, 0x6b, 0xb6, 0x50, 0x93, 0x5d, 0x22, 0x43, 0x1c,
	0x81, 0x29, 0x16, 0x25, 0x53, 0x66, 0xf5, 0xb7, 0xd7, 0x7f, 0xd1, 0x8a, 0x0f, 0x16, 0x25, 0x23,
	0x8a, 0x81, 0x31, 0x98, 0x13, 0xce, 0x73, 0xe5, 0x5c, 0x8f, 0xa8, 0x18, 0xaf, 0x83, 0xc5, 0xaa,
	0x8a, 0x57, 0xca, 0x14, 0x97, 0x68, 0x80, 0x03, 0x70, 0x8e, 0x72, 0x4e, 0xc5, 0xce, 0x83, 0xc0,
	0x1e, 0xa2, 0x08, 0x91, 0x25, 0x94, 0xfc, 0xac, 0x90, 0xf9, 0xde, 0x10, 0x45, 0x06, 0xd1, 0x00,
	0x5f, 0x03, 0xbb, 0x16, 0x55, 0x56, 0xa4, 0x81, 0xab, 0x64, 0x5a, 0x24, 0xf3, 0x73, 0x4d, 0xf7,
	0xd4, 0x29, 0xb5, 0x68, 0xb4, 0x07, 0xa6, 0xdc, 0x0b, 0xf7, 0xc0, 0x1c, 0x73, 0x9e, 0xfb, 0x1d,
	0xec, 0x82, 0xf5, 0x44, 0x8e, 0xf6, 0x11, 0xf6, 0xc0, 0x79, 0xaa, 0xa7, 0xf9, 0x86, 0xcc, 0xef,
	0xca, 0x16, 0xdf, 0xc2, 0x00, 0xf6, 0xbe, 0x92, 0xf5, 0x6d, 0x19, 0xbf, 0x50, 0x52, 0xbe, 0x3b,
	0x7a, 0x03, 0xde, 0x0f, 0xd7, 0x8d, 0x6f, 0x40, 0x4f, 0x54, 0x74, 0xca, 0xe4, 0x01, 0x23, 0x35,
	0xd5, 0x51, 0x78, 0x37, 0xc1, 0xd7, 0xc1, 0xf9, 0xf9, 0xb4, 0xed, 0x5a, 0x1f, 0x75, 0x0c, 0xce,
	0x84, 0xa6, 0x29, 0x4d, 0x59, 0x60, 0x28, 0x4b, 0xfa, 0xed, 0x37, 0x8e, 0x75, 0xb6, 0x75, 0x64,
	0x49, 0x1a, 0xdd, 0x03, 0xa7, 0xad, 0xfc, 0xc6, 0x90, 0x75, 0xb0, 0xde, 0xca, 0xaf, 0x57, 0x33,
	0x5c, 0xa2, 0xc1, 0xf8, 0xee, 0xe9, 0x45, 0xd8, 0xf9, 0x7c, 0x11, 0x76, 0x2e, 0x2f, 0x42, 0xf4,
	0xa1, 0x09, 0xd1, 0xa7, 0x26, 0x44, 0x27, 0x4d, 0x88, 0x4e, 0x9b, 0x10, 0x7d, 0x69, 0x42, 0xf4,
	0xad, 0x09, 0x3b, 0x97, 0x4d, 0x88, 0x8e, 0xbf, 0x86, 0x9d, 0x89, 0xad, 0x6e, 0xe9, 0xfe, 0xf7,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xe5, 0xe1, 0x38, 0x42, 0x04, 0x00, 0x00,
}
